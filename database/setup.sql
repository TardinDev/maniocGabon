-- üóÑÔ∏è CONFIGURATION BASE DE DONN√âES - MANIOC GABON
-- Copiez et collez ce script dans l'√©diteur SQL de Supabase

-- ========================================
-- 1. ACTIVATION DE LA S√âCURIT√â (RLS)
-- ========================================

-- Activer Row Level Security pour la s√©curit√©
-- (Supabase l'active automatiquement sur auth.users)

-- ========================================
-- 2. TABLE PROFILS UTILISATEURS
-- ========================================

-- Cr√©er la table des profils utilisateurs
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email VARCHAR(255) NOT NULL,
  full_name VARCHAR(100),
  avatar_url VARCHAR(500),
  role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('user', 'admin', 'super_admin')),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Activer RLS sur la table profiles
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- ========================================
-- 3. POLICIES DE S√âCURIT√â
-- ========================================

-- Policy: Les utilisateurs peuvent voir leur propre profil
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

-- Policy: Les utilisateurs peuvent modifier leur propre profil
CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

-- Policy: Insertion automatique lors de l'inscription
CREATE POLICY "Enable insert for users" ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

-- ========================================
-- 4. FONCTION AUTOMATIQUE PROFIL
-- ========================================

-- Fonction pour cr√©er automatiquement un profil lors de l'inscription
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, email, full_name)
  VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data->>'full_name', split_part(NEW.email, '@', 1))
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger pour ex√©cuter la fonction √† chaque nouvel utilisateur
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- ========================================
-- 5. FONCTION MISE √Ä JOUR TIMESTAMP
-- ========================================

-- Fonction pour mettre √† jour automatiquement updated_at
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger pour mettre √† jour updated_at automatiquement
CREATE TRIGGER profiles_updated_at
  BEFORE UPDATE ON public.profiles
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

-- ========================================
-- 6. V√âRIFICATION DE S√âCURIT√â
-- ========================================

-- V√©rifier que RLS est bien activ√©
SELECT 
  schemaname, 
  tablename, 
  rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename = 'profiles';

-- Cette requ√™te doit retourner rowsecurity = true

-- ========================================
-- ‚úÖ CONFIGURATION TERMIN√âE
-- ========================================

-- Votre base de donn√©es est maintenant configur√©e !
-- Prochaines √©tapes :
-- 1. Testez la connexion depuis votre application
-- 2. Cr√©ez votre premier utilisateur
-- 3. V√©rifiez que le profil est cr√©√© automatiquement 